#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"},{"aliases":[],"languageName":"pwsh","name":"pwsh"}]}}

#!markdown

# Introduction

![PowerShell hero](../images/01-image-powershell-hero.jpg)

#!markdown

Welcome to this interactive course for PowerShell. You can use these notebooks to get more familiar with PowerShell, learn the basics and get more proficient with PowerShell, scripting and Toolmaking.

#!markdown

![PowerShell Gui meme](../images/01-introduction-to-powershell-batman-meme.jpg)

#!markdown

## What can you do with these notebooks?

This notebook is intended to help you learn the coding language PowerShell. You can:

- Work through these notebooks on your own.
- Use these notebooks as prompts to write your own code in Visual Studio.

## Wat is PowerShell?

PowerShell is a cross-platform task automation solution made up of a command-line shell, a scripting language, and a configuration management framework. PowerShell runs on Windows, Linux, and macOS.
> [Read more](https://learn.microsoft.com/en-us/powershell/scripting/overview?view=powershell-7.4)

#!markdown

# Basic commands

#!markdown

## PowerShell: Hello World

Write your first PowerShell program! It outputs a string _"Hello World"_ to the console.
> Hover your mouse over the following code. On the left side, a little "play" icon should show up. Click that and the code will run!

#!pwsh

"Hello World"

#!markdown

Simply typing a string will print a message to the test console.

`Console.WriteLine` is a method that is used to print a message to a text console. In this case, you specified "Hello World" as the output.

### Declare and use variables

A **variable** is a symbol you can use to run the same code with different values. For example, you can declare a new variable named `aFriend` that you can use to output a string. You can declare this variable by using the `$` in front of the name of the variable, and PowerShell will automatically figure out the type for you.

> Go ahead and run the following code to see the output of **Zelda**.
>
> Next, change the name in the variable and run it again to see something different.

#!pwsh

$aFriend = "Zelda"
$aFriend

#!markdown

### Combining Strings

You may have noticed that the word "Hello" was missing from the last code block. You can fix it by combining multiple string together using `+` to create a new string that it output to the console.

> Run the code to write out a friendly welcome!

#!pwsh

"Hello " + $aFriend + "!"

#!markdown

Congratulation! You just created your first PowerShell script and learned about combining strings with string interpolation.

#!pwsh

# Here's another one with multiple strings and variables that make up a sentence
# TIP: Change the variable values for some fun!

$var1 = 'cat'
$var2 = 'dog'
$var3 = 'fish'
$var4 = 'bird'

"The " + $var1 + " chased" + " the " + $var2 + " who" + " ate" + " the " + $var3 + " and" + " was" + " eaten" + " by" + " the " + $var4

#!markdown

# PowerShell versions

#!markdown

Lets see which version of PowerShell we are using right now

#!pwsh

$PSVersionTable

#!markdown

### Version overview

Depending on at which time you run this, you will probably see PowerShell version 7.x in the output.

By default, recent versions of Windows come with ***Windows PowerShell 5.1*** installed. That would look something like this:

    ```PowerShell
    PS C:> $PSVersionTable

    Name                           Value
    ----                           -----
    PSVersion                      5.1.22621.2506
    PSEdition                      Desktop
    PSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}
    BuildVersion                   10.0.22621.2506
    CLRVersion                     4.0.30319.42000
    WSManStackVersion              3.0
    PSRemotingProtocolVersion      2.3
    SerializationVersion           1.1.0.1
    ```

#### Windows PowerShell 5.1

- Windows Operating Systems only.
- Built on .NET Framework.
- Pre-installed on all recent versions of Windows client and server editions.
- Includes the PowerShell ISE for creating, editing and running scripts.
- Version 5.1 is fully supported by Microsoft but does not get any new features anymore; only security and bugfixes.

#### Windows PowerShell 7

This version started a version 6 and was referenced as PowerShell Core.Version 7 h

- Cross platform.
  - Windows
  - Linux
  - MacOS
- Built on .NET Core
- Backwards compatible with Windows PowerShell scripts and modules
- Performance improvements compared to previous versions
- Pipeline parallelization
- Improved error handling
- New cmdlets and enhancements

### Which version should I use?

For client systems, you should use the latest and greatest PowerShell, which is version 7.x.
For Windows Server operating systems, don't bother installing PowerShell 7 on each system, as you should be able to manage your system just fine using Windows PowerShell. Furthermore, that would only just add another application you have to keep up-to-date.
Only when using a management server that needs to run loads of code, scripts and modules, it can be useful to install PowerShell 7.

#!markdown

## PSReleaseTools

If you are using PowerShell 7, there's a module installed called PSReleaseTools. With this module you can check the details of the latest PowerShell release

#!pwsh

# Show the latest stable release of PowerShell
Get-PSReleaseSummary

#!pwsh

# Show the latest preview release of PowerShell in Markdown format
Get-PsReleaseSummary -Preview -AsMarkdown | Show-Markdown

#!markdown

# Playground: Try it yourself

#!markdown

Each module will have a little "playground" at the end. This is a space for you to try writing some code yourself, instead of looking at prewritten code.
Try out printing words and variables! Here are some prompts to try:

> Print out a personal motto.
>
> Make some variables with your favorite foods, and then write a little story involving them.
>
> **Challenge!**
>
> Make your own Mad Libs! Make a few variables that are verbs, nouns, etcetera, and then use them when you write a story. Have a friend decide the value of each variable and read it to them for a laugh!

#!pwsh

# Playground

Write-Host "Write your code here"
